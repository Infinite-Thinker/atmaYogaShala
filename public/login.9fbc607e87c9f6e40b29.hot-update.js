"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateatmayogashala"]("login",{

/***/ "./src/login.js":
/*!**********************!*\
  !*** ./src/login.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/auth */ \"./node_modules/firebase/auth/dist/index.esm.js\");\n\n\nconsole.log(\"login loaded !\")\n\nlet signupEmail = auth => {\n    // console.log('Signup with email loaded')\n    document.querySelector(\"#main form.signup input.submit\").onclick = function (e) {\n        e.preventDefault()\n        let userid = document.querySelector(\"#main form.signup input.email\").value\n        let password = document.querySelector(\"#main form.signup input.password\").value\n\n        ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.createUserWithEmailAndPassword)(auth, userid, password)\n            .then(userCredential => {\n                // Signed in\n                // const user = userCredential.user;\n                toast(\"Signed in with Email !\")\n                toast(\"Please Fill your Profile !\")\n            })\n            .catch(error => {\n                console.error(error)\n                toast(error.message)\n            })\n    }\n}\n\nlet loginEmail = auth => {\n    // console.log('Login with Email loaded')\n    document.querySelector(\"#main form.login input.submit\").onclick = function (e) {\n        e.preventDefault()\n        let userid = document.querySelector(\"#main form.login input.email\").value\n        let password = document.querySelector(\"#main form.login input.password\").value\n        ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithEmailAndPassword)(auth, userid, password)\n            .then(userCredential => {\n                // Signed in\n                // const user = userCredential.user;\n                toast(\"Signed in with Email !\")\n            })\n            .catch(error => {\n                console.error(error)\n                toast(error.message)\n                // ..\n            })\n    }\n}\n\nlet loginGoogle = auth => {\n    const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_0__.GoogleAuthProvider()\n    provider.addScope(\"https://www.googleapis.com/auth/user.phonenumbers.read\")\n    ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithPopup)(auth, provider)\n        .then(res => {\n            ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getRedirectResult)(auth)\n                .then(result => {\n                    // This gives you a Google Access Token. You can use it to access Google APIs.\n                    // const credential = GoogleAuthProvider.credentialFromResult(result)\n                    // const token = credential.accessToken;\n                    // The signed-in user info.\n                    // const user = result.user\n                    toast(\"Signed in with Google !\")\n                })\n                .catch(error => {\n                    // Handle Errors here.\n                    const errorMessage = error.message\n                    // The email of the user's account used.\n                    const email = error.email\n                    // The AuthCredential type that was used.\n                    const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_0__.GoogleAuthProvider.credentialFromError(error)\n                    // console.log(email, credential)\n                    console.error(error)\n                    toast(error.message)\n                })\n        })\n        .catch(error => {\n            console.error(error)\n            toast(error.message)\n        })\n}\n\nlet loginTwitter = auth => {\n    const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_0__.TwitterAuthProvider()\n    ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithPopup)(auth, provider)\n        .then(res => {\n            // console.log(res)\n            ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getRedirectResult)(auth)\n                .then(result => {\n                    // This gives you a Google Access Token. You can use it to access Google APIs.\n                    // const credential = GoogleAuthProvider.credentialFromResult(result)\n                    // const token = credential.accessToken;\n                    // The signed-in user info.\n                    // const user = result.user\n                    // console.log(result)\n                    toast(\"Signed in with Twitter !\")\n                })\n                .catch(error => {\n                    // Handle Errors here.\n                    // The email of the user's account used.\n                    const email = error.email\n                    // The AuthCredential type that was used.\n                    const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_0__.GoogleAuthProvider.credentialFromError(error)\n                    // console.log(email, credential)\n                    console.error(error)\n                    toast(error.message)\n                })\n        })\n        .catch(error => {\n            toast(error.message)\n            if (error.code == \"auth/account-exists-with-different-credential\") toast(`Please use ${error.customData._tokenResponse.verifiedProvider} for ${error.customData.email}`)\n        })\n}\n\nlet loginFb = auth => {\n    const provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_0__.FacebookAuthProvider()\n    ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithPopup)(auth, provider)\n        .then(res => {\n            // console.log(res)\n            ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getRedirectResult)(auth)\n                .then(result => {\n                    // This gives you a Google Access Token. You can use it to access Google APIs.\n                    // const credential = GoogleAuthProvider.credentialFromResult(result)\n                    // const token = credential.accessToken;\n                    // The signed-in user info.\n                    // const user = result.user\n                    // console.log(result)\n                    toast(\"Signed in with Facebook !\")\n                })\n                .catch(error => {\n                    // Handle Errors here.\n                    // The email of the user's account used.\n                    const email = error.email\n                    // The AuthCredential type that was used.\n                    const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_0__.FacebookAuthProvider.credentialFromError(error)\n                    // console.log(email, credential)\n                    console.error(error)\n                    toast(error.message)\n                })\n        })\n        .catch(error => {\n            toast(error.message)\n            if (error.code == \"auth/account-exists-with-different-credential\") toast(`Please use ${error.customData._tokenResponse.verifiedProvider} for ${error.customData.email}`)\n        })\n}\n\nlet submitPhoneNumberAuth = auth => {\n    let phone = document.querySelector(\"#main form.signup_phone input.phone\").value\n    let appVerifier = window.recaptchaVerifier\n    ;(0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithPhoneNumber)(auth, phone, appVerifier)\n        .then(confirmationResult => {\n            // SMS sent. Prompt user to type the code from the message, then sign the\n            // user in with confirmationResult.confirm(code).\n            window.confirmationResult = confirmationResult\n            toast(\"OTP Sent Successfully !\")\n            document.querySelector(\"form.signup_phone input:last-of-type\").classList.add(\"submit\")\n        })\n        .catch(error => {\n            // Error; SMS not sent\n            console.error(error)\n            toast(error.message)\n            grecaptcha.reset(window.recaptchaWidgetId)\n\n            // Or, if you haven't stored the widget ID:\n            window.recaptchaVerifier.render().then(function (widgetId) {\n                grecaptcha.reset(widgetId)\n            })\n        })\n}\n\nlet submitPhoneNumberAuthCode = auth => {\n    let code = document.querySelector(\"#main form.signup_phone input.otp\").value\n    if (code.length < 5) {\n        toast(\"Invalid OTP\")\n        return\n    }\n    confirmationResult\n        .confirm(code)\n        .then(result => {\n            // User signed in successfully.\n            toast(\"Login Success with Phone !\")\n        })\n        .catch(error => {\n            // User couldn't sign in (bad verification code?)\n            console.error(error)\n            toast(error.message)\n        })\n}\n\nlet loginPhone = auth => {\n    // console.log('Login with phone loaded !')\n    window.recaptchaVerifier = new firebase_auth__WEBPACK_IMPORTED_MODULE_0__.RecaptchaVerifier(\n        \"recaptcha-container\",\n        {\n            size: \"invisible\",\n            callback: response => {\n                // reCAPTCHA solved, allow signInWithPhoneNumber.\n                //submitPhoneNumberAuth(auth)\n            },\n            \"expired-callback\": () => {\n                toast(\"ReCaptcha Loading Failed\")\n            },\n        },\n        auth\n    )\n    document.querySelector(\"div.login form.signup_phone input.sendOTP\").onclick = e => {\n        submitPhoneNumberAuth(auth)\n        return false\n    }\n    document.querySelector(\"div.login form.signup_phone input:last-of-type\").onclick = e => {\n        submitPhoneNumberAuthCode(auth)\n        return false\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/login.js\n");

/***/ })

});